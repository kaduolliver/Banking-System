from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.database.db import Base

class Agencia(Base):
    __tablename__ = 'agencia'

    id_agencia = Column(Integer, primary_key=True)
    nome = Column(String(255), nullable=False)
    codigo_agencia = Column(String(50), unique=True, nullable=False)
    endereco_id = Column(Integer, ForeignKey('endereco.id_endereco'), unique=True, nullable=False)

    endereco = relationship("Endereco", back_populates="agencia")
    contas = relationship("Conta", back_populates="agencia")


from sqlalchemy import Column, Integer, ForeignKey, String, Text, TIMESTAMP
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import datetime

class Auditoria(Base):
    __tablename__ = 'auditoria'

    id_auditoria = Column(Integer, primary_key=True)
    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'))
    acao = Column(String(100), nullable=False)
    data_hora = Column(TIMESTAMP, nullable=False, default=datetime.utcnow)
    detalhes = Column(Text)

    usuario = relationship("Usuario", back_populates="auditorias")


from sqlalchemy import Column, Integer, ForeignKey, Numeric
from sqlalchemy.orm import relationship
from app.database.db import Base

class Cliente(Base):
    __tablename__ = 'cliente'

    id_cliente = Column(Integer, primary_key=True)
    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), unique=True, nullable=False)
    score_credito = Column(Numeric(5, 2))

    usuario = relationship("Usuario", back_populates="cliente", uselist=False)
    contas = relationship("Conta", back_populates="cliente")
    emprestimos = relationship("Emprestimo", back_populates="cliente")



from sqlalchemy import Column, Integer, String, ForeignKey, Numeric, Date, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import date

class Conta(Base):
    __tablename__ = 'conta'

    id_conta = Column(Integer, primary_key=True)
    numero_conta = Column(String(20), unique=True, nullable=False)
    id_agencia = Column(Integer, ForeignKey('agencia.id_agencia'), nullable=False)
    saldo = Column(Numeric(15, 2), nullable=False, default=0.00)
    tipo_conta = Column(String(50), nullable=False)
    id_cliente = Column(Integer, ForeignKey('cliente.id_cliente'), nullable=False)
    data_abertura = Column(Date, nullable=False, default=date.today)
    status = Column(String(20), nullable=False, default='ativa')

    cliente = relationship("Cliente", back_populates="contas")
    agencia = relationship("Agencia", back_populates="contas")
    poupanca = relationship("ContaPoupanca", back_populates="conta", uselist=False)
    corrente = relationship("ContaCorrente", back_populates="conta", uselist=False)
    investimento = relationship("ContaInvestimento", back_populates="conta", uselist=False)
    transacoes_origem = relationship("Transacao", back_populates="conta_origem", foreign_keys='Transacao.id_conta_origem')
    transacoes_destino = relationship("Transacao", back_populates="conta_destino", foreign_keys='Transacao.id_conta_destino')
    emprestimos = relationship("Emprestimo", back_populates="conta")

    __table_args__ = (
        CheckConstraint("tipo_conta IN ('corrente', 'poupanca', 'investimento')", name='check_tipo_conta'),
    )


from sqlalchemy import Column, Integer, ForeignKey, Numeric, Date
from sqlalchemy.orm import relationship
from app.database.db import Base

class ContaCorrente(Base):
    __tablename__ = 'conta_corrente'

    id_conta_corrente = Column(Integer, primary_key=True)
    id_conta = Column(Integer, ForeignKey('conta.id_conta'), unique=True, nullable=False)
    limite = Column(Numeric(15, 2), nullable=False, default=0.00)
    data_vencimento = Column(Date)
    taxa_manutencao = Column(Numeric(5, 2), nullable=False, default=0.00)

    conta = relationship("Conta", back_populates="corrente")


from sqlalchemy import Column, Integer, ForeignKey, Numeric, String, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base

class ContaInvestimento(Base):
    __tablename__ = 'conta_investimento'

    id_conta_investimento = Column(Integer, primary_key=True)
    id_conta = Column(Integer, ForeignKey('conta.id_conta'), unique=True, nullable=False)
    perfil_risco = Column(String(50), nullable=False)
    valor_minimo = Column(Numeric(15, 2), nullable=False, default=0.00)
    taxa_rendimento_base = Column(Numeric(5, 4), nullable=False)

    conta = relationship("Conta", back_populates="investimento")

    __table_args__ = (
        CheckConstraint(
            "perfil_risco IN ('conservador', 'moderado', 'arrojado')",
            name='check_perfil_risco'
        ),
    )


from sqlalchemy import Column, Integer, ForeignKey, Numeric
from sqlalchemy.orm import relationship
from app.database.db import Base

class ContaPoupanca(Base):
    __tablename__ = 'conta_poupanca'

    id_conta_poupanca = Column(Integer, primary_key=True)
    id_conta = Column(Integer, ForeignKey('conta.id_conta'), unique=True, nullable=False)
    taxa_rendimento = Column(Numeric(5, 4), nullable=False)
    ultimo_rendimento = Column(Numeric(15, 2))

    conta = relationship("Conta", back_populates="poupanca")


from sqlalchemy import Column, Integer, ForeignKey, Numeric, TIMESTAMP, String, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import datetime

class Emprestimo(Base):
    __tablename__ = 'emprestimo'

    id_emprestimo = Column(Integer, primary_key=True)
    id_cliente = Column(Integer, ForeignKey('cliente.id_cliente'), nullable=False)
    id_conta = Column(Integer, ForeignKey('conta.id_conta'), nullable=False)
    valor_solicitado = Column(Numeric(15, 2), nullable=False)
    taxa_juros_mensal = Column(Numeric(5, 2), nullable=False)
    prazo_meses = Column(Integer, nullable=False)
    valor_total = Column(Numeric(15, 2), nullable=False)
    data_solicitacao = Column(TIMESTAMP, nullable=False, default=datetime.utcnow)
    data_aprovacao = Column(TIMESTAMP)
    status = Column(String(20), nullable=False, default='PENDENTE')
    score_risco = Column(Numeric(5, 2))

    cliente = relationship("Cliente", back_populates="emprestimos")
    conta = relationship("Conta", back_populates="emprestimos")

    __table_args__ = (
        CheckConstraint("prazo_meses BETWEEN 6 AND 60", name='check_prazo_meses'),
        CheckConstraint("status IN ('PENDENTE', 'APROVADO', 'REJEITADO', 'PAGO')", name='check_status_emprestimo'),
    )


from sqlalchemy import Column, Integer, String, ForeignKey, CHAR
from sqlalchemy.orm import relationship
from app.database.db import Base

class Endereco(Base):
    __tablename__ = 'endereco'

    id_endereco = Column(Integer, primary_key=True)
    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), nullable=False)
    cep = Column(String(10), nullable=False)
    logradouro = Column(String(255), nullable=False)
    numero_casa = Column(String(255), nullable=False)
    bairro = Column(String(100), nullable=False)
    estado = Column(CHAR(2), nullable=False)
    complemento = Column(String(255))

    usuario = relationship("Usuario", back_populates="enderecos")
    agencia = relationship("Agencia", back_populates="endereco", uselist=False)


from sqlalchemy import Column, Integer, String, ForeignKey
from sqlalchemy.orm import relationship
from app.database.db import Base

class Funcionario(Base):
    __tablename__ = 'funcionario'

    id_funcionario = Column(Integer, primary_key=True)
    id_usuario = Column(Integer, ForeignKey('usuario.id_usuario'), unique=True, nullable=False)
    codigo_funcionario = Column(String(50), unique=True, nullable=False)
    cargo = Column(String(100), nullable=False)
    id_supervisor = Column(Integer, ForeignKey('funcionario.id_funcionario'))

    usuario = relationship("Usuario", back_populates="funcionario", uselist=False)
    supervisor = relationship("Funcionario", remote_side=[id_funcionario], backref="subordinados")
    relatorios = relationship("Relatorio", back_populates="funcionario")


from sqlalchemy import Column, Integer, ForeignKey, String, Text, TIMESTAMP
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import datetime

class Relatorio(Base):
    __tablename__ = 'relatorio'

    id_relatorio = Column(Integer, primary_key=True)
    id_funcionario = Column(Integer, ForeignKey('funcionario.id_funcionario'), nullable=False)
    tipo_relatorio = Column(String(100), nullable=False)
    data_geracao = Column(TIMESTAMP, nullable=False, default=datetime.utcnow)
    conteudo = Column(Text)

    funcionario = relationship("Funcionario", back_populates="relatorios")


from sqlalchemy import Column, Integer, ForeignKey, String, Numeric, Text, TIMESTAMP, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import datetime

class Transacao(Base):
    __tablename__ = 'transacao'

    id_transacao = Column(Integer, primary_key=True)
    id_conta_origem = Column(Integer, ForeignKey('conta.id_conta'), nullable=False)
    id_conta_destino = Column(Integer, ForeignKey('conta.id_conta'))
    tipo_transacao = Column(String(50), nullable=False)
    valor = Column(Numeric(15, 2), nullable=False)
    data_hora = Column(TIMESTAMP, nullable=False, default=datetime.utcnow)
    descricao = Column(Text)

    conta_origem = relationship("Conta", foreign_keys=[id_conta_origem], back_populates="transacoes_origem")
    conta_destino = relationship("Conta", foreign_keys=[id_conta_destino], back_populates="transacoes_destino")

    __table_args__ = (
        CheckConstraint(
            "tipo_transacao IN ('deposito', 'saque', 'transferencia')",
            name='check_tipo_transacao'
        ),
    )


from sqlalchemy import Column, Integer, String, Date, Boolean, TIMESTAMP, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base
from app.models.endereco import Endereco  

class Usuario(Base):
    __tablename__ = "usuario"

    id_usuario = Column(Integer, primary_key=True)
    nome = Column(String(255), nullable=False)
    cpf = Column(String(11), unique=True, nullable=False)
    data_nascimento = Column(Date, nullable=False)
    telefone = Column(String(20), nullable=False)
    tipo_usuario = Column(String(50), nullable=False)
    senha_hash = Column(String(255), nullable=False)
    otp_ativo = Column(Boolean, default=False)
    otp_codigo = Column(String(6))
    otp_expiracao = Column(TIMESTAMP)

    cliente = relationship("Cliente", back_populates="usuario", uselist=False)
    funcionario = relationship("Funcionario", back_populates="usuario", uselist=False)
    enderecos = relationship("Endereco", back_populates="usuario")
    auditorias = relationship("Auditoria", back_populates="usuario")


    __table_args__ = (
        CheckConstraint("tipo_usuario IN ('cliente', 'funcionario')", name='check_tipo_usuario'),
    )


from sqlalchemy import Column, Integer, ForeignKey, String, DateTime, Numeric, CheckConstraint
from sqlalchemy.orm import relationship
from app.database.db import Base
from datetime import datetime

class SolicitacaoConta(Base):
    __tablename__ = 'solicitacao_conta'

    id_solicitacao = Column(Integer, primary_key=True)
    id_cliente = Column(Integer, ForeignKey('cliente.id_cliente'), nullable=False)
    tipo_conta = Column(String(50), nullable=False)
    data_solicitacao = Column(DateTime, nullable=False, default=datetime.utcnow)
    status = Column(String(20), nullable=False, default='PENDENTE')
    id_funcionario_aprovador = Column(Integer, ForeignKey('funcionario.id_funcionario'), nullable=True)
    observacoes = Column(String(500))
    valor_inicial = Column(Numeric(15, 2), default=0.00)

    cliente = relationship("Cliente")
    funcionario_aprovador = relationship("Funcionario")

    __table_args__ = (
        CheckConstraint("tipo_conta IN ('corrente', 'poupanca', 'investimento')", name='check_tipo_conta_solicitada'),
        CheckConstraint("status IN ('PENDENTE', 'APROVADA', 'REJEITADA')", name='check_status_solicitacao'),
    )
